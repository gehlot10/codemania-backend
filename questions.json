[
  {
    "no": 1,
    "name": "Max Sum Subarray of size K",
    "description": "Given an array of integers Arr of size N and a number K. Return the maximum sum of a subarray of size K. NOTE*: A subarray is a contiguous part of any given array.",
    "difficulty": "Easy",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(1)",
    "companies": " Amazon Facebook Visa",
    "testcase1": "4 2 100 200 300 400",
    "testcase2": "4 4 100 200 300 400",
    "testcase3": "5 3 50 100 150 200 250",
    "outputOfTestcase1": "700",
    "outputOfTestcase2": "1000",
    "outputOfTestcase3": "600",
    "sampleInput1": "N = 4, K = 2 Arr = [100, 200, 300, 400]",
    "sampleInput2": "N = 4 K = 4 arr[] = [100, 200, 300, 400]",
    "sampleInput3": "N = 5, K = 3 Arr = [50, 100, 150, 200, 250]",
    "sampleOutput1": "700",
    "sampleOutput2": "1000",
    "sampleOutput3": "600",
    "accepted": "492",
    "submission": "1209",
    "like": 305,
    "dislike": 108,
    "constraint1": "1 <= N <= 10⁵",
    "constraint2": "1 <= Arri <= 10⁵"
  },
  {
   
    "no": 2,
    "name": "Majority Element",
    "description": "Given an array A of N elements. Find the majority element in the array. A majority element in an array A of size N is an element that appears strictly more than N/2 times in the array.",
    "difficulty": "Medium",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(1)",
    "companies": " Flipkart Accolite Atlassian",
    "testcase1": "3 1 2 3",
    "testcase2": "4 31 11 44 44 ",
    "testcase3": "5 3 1 3 3 2",
    "outputOfTestcase1": "-1",
    "outputOfTestcase2": "-1",
    "outputOfTestcase3": "3",
    "sampleInput1": " N = 5 A[] = {3,1,3,3,2} ",
    "sampleInput2": "N = 3 A[] = {1,2,3} ",
    "sampleInput3": "N = 4  A[] = {1,2,3} ",
    "sampleOutput1": "3",
    "sampleOutput2": "-1",
    "sampleOutput3": "-1",
    "accepted": "212",
    "submission": "554",
    "like": 120,
    "dislike": 50,
    "constraint1": "1 ≤ N ≤ 10⁷",
    "constraint2": "0 ≤ Ai ≤ 10⁶"
  },
  {
    "no": 3,
    "name": "Kadane's Algorithm",
    "description": "Given an array Arr[] of N integers. Find the contiguous sub-array(containing at least one number) which has the maximum sum and return its sum.You don't need to read input or print anything. The task is to complete the function maxSubarraySum() which takes Arr[] and N as input parameters and returns the sum of subarray with maximum sum.",
    "difficulty": "Medium",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(1)",
    "companies": "Zoho Flipkart Morgan Stanley",
    "testcase1": "5 1 2 3 -2 5",
    "testcase2": "4 -1 -2 -3 -4",
    "testcase3": "5 2 6 3 9 12",
    "outputOfTestcase1": "9",
    "outputOfTestcase2": "-1",
    "outputOfTestcase3": "32",
    "sampleInput1": "N = 5 Arr[] = {1,2,3,-2,5}",
    "sampleInput2": "N = 4 Arr[] = {-1,-2,-3,-4}",
    "sampleInput3": "N = 5  A[] = {2,6, 3, 9, 12} ",
    "sampleOutput1": "9",
    "sampleOutput2": "-1",
    "sampleOutput3": "-32",
    "accepted": "238",
    "submission": "828",
    "like": 302,
    "dislike": 91,
    "constraint1": "1 ≤ N ≤ 10⁶",
    "constraint2": "-10⁷ ≤ A[i] ≤ 10⁷"
  },
  {
    "no": 4,
    "name": "Equilibrium Point",
    "description": "Given an array A of n positive numbers. The task is to find the first equilibrium point in an array. Equilibrium point in an array is an index (or position) such that the sum of all elements before that index is same as sum of elements after it.The task is to complete the function equilibriumPoint() which takes the array and n as input parameters and returns the point of equilibrium. Note: Return equilibrium point in 1-based indexing. Return -1 if no such point exists. ",
    "difficulty": "Easy",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(1)",
    "companies": "Adobe Amazon Google",
    "testcase1": "5 1 3 5 2 2",
    "testcase2": "1 1",
    "testcase3": "3 5 8 10",
    "outputOfTestcase1": "3",
    "outputOfTestcase2": "1",
    "outputOfTestcase3": "-1",
    "sampleInput1": "n = 5 A[] = {1,3,5,2,2}",
    "sampleInput2": "n = 1 A[] = {1}",
    "sampleInput3": "n = 3 A[] = {5, 8, 10}",
    "sampleOutput1": "3",
    "sampleOutput2": "1",
    "sampleOutput3": "-1",
    "accepted": "138",
    "submission": "516",
    "like": 99,
    "dislike": 31,
    "constraint1": "1 <= n <= 10⁵",
    "constraint2": "1 <= A[i] <= 10⁹"
  },
  {
    "no": 5,
    "name": "Smallest window in a string containing characters of string",
    "description": "Given two strings S and P. Find the smallest window in the string S consisting of all the characters(including duplicates) of the string P.  Return '-1' in case there is no such window present. In case there are multiple such windows of same length, return the one with the least starting index. Note : All characters are in Lowercase alphabets.",
    "difficulty": "Hard",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "MakeMyTrip Media.net Atlassian",
    "testcase1": "timetopractice toc",
    "testcase2": "zoomlazapzo oza",
    "testcase3": "programming gir",
    "outputOfTestcase1": "toprac",
    "outputOfTestcase2": "apzo",
    "outputOfTestcase3": "grammi",
    "sampleInput1": "S = 'timetopractice' P = 'toc'",
    "sampleInput2": "S = 'zoomlazapzo' P = 'oza'",
    "sampleInput3": "S = 'programming' P = 'gir'",
    "sampleOutput1": "toprac",
    "sampleOutput2": "apzo",
    "sampleOutput3": "grammi",
    "accepted": "18",
    "submission": "122",
    "like": 38,
    "dislike": 25,
    "constraint1": "1 ≤ |S|, |P| ≤10⁵",
    "constraint2": "Note : All characters are in Lowercase alphabets. "
  },
  {
    "no": 6,
    "name": "Largest subarray with 0 sum",
    "description": "Given an array having both positive and negative integers. The task is to compute the length of the largest subarray with sum 0.You just have to complete the function maxLen() which takes two arguments an array A and n, where n is the size of the array A and returns the length of the largest subarray with 0 sum.",
    "difficulty": "Medium",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Amazon Microsoft MakeMyTrip",
    "testcase1": "4 1 2 12 11",
    "testcase2": "8 15 -2 2 -8 1 7 10 23",
    "testcase3": "6 23 -3 20 11 -7 -4",
    "outputOfTestcase1": "0",
    "outputOfTestcase2": "5",
    "outputOfTestcase3": "3",
    "sampleInput1": "N = 5 A[] = {1, 2, 12, 11}",
    "sampleInput2": "N = 8 A[] = {15,-2,2,-8,1,7,10,23}",
    "sampleInput3": "N = 6 A[] = {23, -3, 20, 11, -7, -4}",
    "sampleOutput1": "0",
    "sampleOutput2": "8",
    "sampleOutput3": "3",
    "accepted": "109",
    "submission": "253",
    "like": 87,
    "dislike": 32,
    "constraint1": "1 <= N <= 10⁵",
    "constraint2": "-1000 <= A[i] <= 1000, for each valid i"
  },
  {
    "no": 7,
    "name": "Stock span problem",
    "description": "The stock span problem is a financial problem where we have a series of n daily price quotes for a stock and we need to calculate the span of stocks price for all n days. The span Si of the stocks price on a given day i is defined as the maximum number of consecutive days just before the given day, for which the price of the stock on the given day is less than or equal to its price on the current day.For example, if an array of 7 days prices is given as {100, 80, 60, 70, 60, 75, 85}, then the span values for corresponding 7 days are {1, 1, 1, 2, 1, 4, 6}.",
    "difficulty": "Medium",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Amazon Microsoft MakeMyTrip",
    "testcase1": "6 10 4 5 90 120 80",
    "testcase2": "7 100 80 60 70 60 75 85",
    "testcase3": "3 20 10 70",
    "outputOfTestcase1": "1 1 2 4 5 1",
    "outputOfTestcase2": "1 1 1 2 1 4 6",
    "outputOfTestcase3": "1 1 3",
    "sampleInput1": "N = 7, price[] = [100 80 60 70 60 75 85]",
    "sampleInput2": "N = 6, price[] = [10 4 5 90 120 80]",
    "sampleInput3": "N = 3, price[] = [20, 10, 70]",
    "sampleOutput1": "1 1 1 2 1 4 6",
    "sampleOutput2": "1 1 2 4 5 1",
    "sampleOutput3": "1 1 3",
    "accepted": "78",
    "submission": "165",
    "like": 46,
    "dislike": 9,
    "constraint1": "1 <= N <= 10⁵",
    "constraint2": "1 ≤ C[i] ≤ 105"
  },
  {
    "no": 8,
    "name": "Coin Change",
    "description": "Given an integer array coins[ ] of size N representing different denominations of currency and an integer sum, find the number of ways you can make sum by using different combinations from coins[ ]. ",
    "difficulty": "Hard",
    "timeComplexity": "O(m*n)",
    "spaceComplexity": "O(m)",
    "companies": "Paytm Flipkart Morgan Stanley",
    "testcase1": "4 3 1 2 3",
    "testcase2": "10 4 2 5 3 6",
    "testcase3": "11 3 7 9 2",
    "outputOfTestcase1": "4",
    "outputOfTestcase2": "5",
    "outputOfTestcase3": "2",
    "sampleInput1": " sum = 4, N = 3, coins = {1, 2, 3}",
    "sampleInput2": "Sum = 11, N = 3, coins = {7, 9, 2}",
    "sampleInput3": "Sum = 10, N = 4, coins = {2, 5, 3, 6}",
    "sampleOutput1": "4",
    "sampleOutput2": "2",
    "sampleOutput3": "5",
    "accepted": "90",
    "submission": "244",
    "like": 78,
    "dislike": 22,
    "constraint1": "1 <= sum, N, coins[i] <= 10³",
    "constraint2": "Note: Assume that you have an infinite supply of each type of coin. And you can use any coin as many times as you want."
  },
  {
    "no": 9,
    "name": "Count Inversions",
    "description": "Given an array of integers. Find the Inversion Count in the array. Inversion Count: For an array, inversion count indicates how far (or close) the array is from being sorted. If the array is already sorted then the inversion count is 0.If an array is sorted in the reverse order then the inversion count is the maximum. Formally, two elements a[i] and a[j] form an inversion if a[i] > a[j] and i < j. ",
    "difficulty": "Easy",
    "timeComplexity": "O(NlogN)",
    "spaceComplexity": "O(N)",
    "companies": "Bankbazar Myantra Amazon",
    "testcase1": "5 2 4 1 3 5 3",
    "testcase2": "5 2 3 4 5 6",
    "testcase3": "3 10 10 10",
    "outputOfTestcase1": "3",
    "outputOfTestcase2": "0",
    "outputOfTestcase3": "0",
    "sampleInput1": "N = 5, arr[] = {2, 4, 1, 3, 5}",
    "sampleInput2": "N = 5 arr[] = {2, 3, 4, 5, 6}",
    "sampleInput3": "N = 3, arr[] = {10, 10, 10}",
    "sampleOutput1": "3",
    "sampleOutput2": "0",
    "sampleOutput3": "0",
    "accepted": "102",
    "submission": "462",
    "like": 56,
    "dislike": 12,
    "constraint1": "1 ≤ N ≤ 5*10⁵",
    "constraint2": "1 ≤ arr[i] ≤ 10¹⁸"
  },
  {
    "no": 10,
    "name": "Allocate minimum number of pages",
    "description": "You have N books, each with A[i] number of pages. M students need to be allocated contiguous books, with each student getting at least one book.Out of all the permutations, the goal is to find the permutation where the student with the most books allocated to him gets the minimum number of pages, out of all possible permutations.Note: Return -1 if a valid assignment is not possible, and allotment should be in contiguous order (see the explanation for better understanding).",
    "difficulty": "Medium",
    "timeComplexity": "O(NlogN)",
    "spaceComplexity": "O(1)",
    "companies": "Infosys Amazon Codenation",
    "testcase1": "3 15 17 20 2",
    "testcase2": "4 12 34 67 90 2",
    "testcase3": "3 6 3 10 2",
    "outputOfTestcase1": "32",
    "outputOfTestcase2": "113",
    "outputOfTestcase3": "10",
    "sampleInput1": "N = 4 A[] = {12,34,67,90} M = 2",
    "sampleInput2": "N = 3 A[] = {15,17,20} M = 2",
    "sampleInput3": "N = 3 A[] = {3, 6, 10 } M = 2",
    "sampleOutput1": "113",
    "sampleOutput2": "32",
    "sampleOutput3": "10",
    "accepted": "60",
    "submission": "168",
    "like": 77,
    "dislike": 12,
    "constraint1": "1 <= N <= 10⁵",
    "constraint2": "1 <= M <= 10⁵"
  },
  {
    "no": 11,
    "name": "Anagram",
    "description": "Given two strings a and b consisting of lowercase characters. The task is to check whether two given strings are an anagram of each other or not. An anagram of a string is another string that contains the same characters, only the order of characters can be different. For example, act and tac are an anagram of each other.",
    "difficulty": "Easy",
    "timeComplexity": "O(m+n)",
    "spaceComplexity": "O(n)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "130",
    "submission": "277",
    "like": 115,
    "dislike": 43,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
    "no": 12,
    "name": "N-Queens",
    "description": "The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.",
    "difficulty": "Hard",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "641",
    "submission": "959",
    "like": 117,
    "dislike": 25,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
    "no": 13,
    "name": "N-Queens 2",
    "description": "The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.Given an integer n, return the number of distinct solutions to the n-queens puzzle.",
    "difficulty": "Hard",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "382",
    "submission": "477",
    "like": 37,
    "dislike": 12,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
    "no": 14,
    "name": "Maximum Subarray",
    "description": "Given an integer array nums, find the subarray with the largest sum, and return its sum.",
    "difficulty": "Medium",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "3600",
    "submission": "7000",
    "like": 320,
    "dislike": 140,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
    "no": 15,
    "name": "Spiral Matrix",
    "description": "Given an m x n matrix, return all elements of the matrix in spiral order.",
    "difficulty": "Medium",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "130",
    "submission": "26",
    "like": 139,
    "dislike": 12,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
    "no": 16,
    "name": "Jump Game",
    "description": "You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position. Return true if you can reach the last index, or false otherwise.",
    "difficulty": "Medium",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "1700",
    "submission": "4300",
    "like": 183,
    "dislike": 111,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
    "no": 17,
    "name": "Merge Interval",
    "description": "Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.",
    "difficulty": "Medium",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "2100",
    "submission": "4600",
    "like": 210,
    "dislike": 73,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
    "no": 18,
    "name": "Insert Interval",
    "description": "You are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] represent the start and the end of the ith interval and intervals is sorted in ascending order by starti. You are also given an interval newInterval = [start, end] that represents the start and end of another interval.Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).Return intervals after the insertion.",
    "difficulty": "Medium",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "895",
    "submission": "2300",
    "like": 930,
    "dislike": 68,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
    "no": 19,
    "name": "Length of Last Word",
    "description": "Given a string s consisting of words and spaces, return the length of the last word in the string.A word is a maximal substring consisting of non-space characters only.",
    "difficulty": "Easy",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "1500",
    "submission": "3200",
    "like": 123,
    "dislike": 51,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
    "no": 20,
    "name": "Spiral Matrix 2",
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",
    "difficulty": "Medium",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "526",
    "submission": "761",
    "like": 123,
    "dislike": 56,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
    
    "no": 21,
    "name": "Permutation Sequence",
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",
    "difficulty": "Hard",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "364",
    "submission": "794",
    "like": 122,
    "dislike": 50,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
    
    "no": 22,
    "name": "Rotate List",
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",
    "difficulty": "Medium",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "849",
    "submission": "2300",
    "like": 122,
    "dislike": 50,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
  
    "no": 23,
    "name": "Unique Path",
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",
    "difficulty": "Medium",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "1700",
    "submission": "2600",
    "like": 122,
    "dislike": 50,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
    
    "no": 24,
    "name": "Unique Path 2",
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",
    "difficulty": "Medium",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "844",
    "submission": "2100",
    "like": 122,
    "dislike": 50,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
   
    "no": 25,
    "name": "Minimum Path Sum",
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",
    "difficulty": "Medium",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "1100",
    "submission": "1700",
    "like": 122,
    "dislike": 50,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
   
    "no": 26,
    "name": "Valid Number",
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",
    "difficulty": "Hard",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "330",
    "submission": "1700",
    "like": 122,
    "dislike": 50,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
   
    "no": 27,
    "name": "Plus One",
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",
    "difficulty": "Easy",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "2000",
    "submission": "4500",
    "like": 123,
    "dislike": 50,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
  
    "no": 28,
    "name": "Add Binary",
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",
    "difficulty": "Easy",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "1300",
    "submission": "2500",
    "like": 122,
    "dislike": 50,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
   
    "no": 29,
    "name": "Text Justification",
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",
    "difficulty": "Hard",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "371",
    "submission": "890",
    "like": 122,
    "dislike": 50,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
  
    "no": 30,
    "name": "Sqrt(x)",
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",
    "difficulty": "Easy",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "1700",
    "submission": "4600",
    "like": 122,
    "dislike": 50,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
    
    "no": 31,
    "name": "Climing Stairs",
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",
    "difficulty": "Easy",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "2800",
    "submission": "5400",
    "like": 122,
    "dislike": 50,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
  
    "no": 32,
    "name": "Simplify Path",
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",
    "difficulty": "Medium",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "653",
    "submission": "1600",
    "like": 122,
    "dislike": 50,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
   
    "no": 33,
    "name": "Edit Distance",
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",
    "difficulty": "Medium",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "765",
    "submission": "1400",
    "like": 122,
    "dislike": 50,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
   
    "no": 34,
    "name": "Set Matrix Zeros",
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",
    "difficulty": "Medium",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "1200",
    "submission": "2300",
    "like": 122,
    "dislike": 50,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
    
    "no": 35,
    "name": "Search a 2D Matrix",
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",
    "difficulty": "Medium",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "1600",
    "submission": "3200",
    "like": 122,
    "dislike": 50,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
  
    "no": 36,
    "name": "Sort Colors",
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",
    "difficulty": "Medium",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "1700",
    "submission": "2800",
    "like": 122,
    "dislike": 50,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
  
    "no": 37,
    "name": "Minimum Window Substring",
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",
    "difficulty": "Hard",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "1200",
    "submission": "2800",
    "like": 122,
    "dislike": 50,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
    
    "no": 38,
    "name": "Combinations",
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",
    "difficulty": "Medium",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "827",
    "submission": "1200",
    "like": 122,
    "dislike": 50,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
  
    "no": 39,
    "name": "Subsets",
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",
    "difficulty": "Medium",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "1700",
    "submission": "2200",
    "like": 122,
    "dislike": 50,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
    
    "no": 40,
    "name": "Word Search",
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",
    "difficulty": "Medium",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "1400",
    "submission": "3500",
    "like": 122,
    "dislike": 50,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
    
    "no": 41,
    "name": "Remove Duplicate from Sorted Array 2",
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",
    "difficulty": "Medium",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "744",
    "submission": "1300",
    "like": 122,
    "dislike": 50,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
   
    "no": 42,
    "name": "Search in Rotated Sorted Array",
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",
    "difficulty": "Medium",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "655",
    "submission": "1800",
    "like": 122,
    "dislike": 50,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
  
    "no": 43,
    "name": "Remove Duplicate from Sorted List 2",
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",
    "difficulty": "Medium",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "672",
    "submission": "1400",
    "like": 122,
    "dislike": 50,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
    
    "no": 44,
    "name": "Remove Duplicate from Sorted List ",
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",
    "difficulty": "Easy",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "1400",
    "submission": "2600",
    "like": 122,
    "dislike": 50,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
   
    "no": 45,
    "name": "Largest Rectangle in Histogram",
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",
    "difficulty": "Hard",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "788",
    "submission": "1800",
    "like": 122,
    "dislike": 50,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
   
    "no": 46,
    "name": "Maximal Rectangle",
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",
    "difficulty": "Hard",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "377",
    "submission": "817",
    "like": 122,
    "dislike": 50,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
    
    "no": 47,
    "name": "Partition List",
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",
    "difficulty": "Medium",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "571",
    "submission": "1000",
    "like": 122,
    "dislike": 50,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
   
    "no": 48,
    "name": "Scramble String",
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",
    "difficulty": "Hard",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "216",
    "submission": "547",
    "like": 122,
    "dislike": 50,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
   
    "no": 49,
    "name": "Merge Sorted Array",
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",
    "difficulty": "Easy",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "2600",
    "submission": "5400",
    "like": 122,
    "dislike": 50,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
   
    "no": 50,
    "name": "Gray Code",
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",
    "difficulty": "Medium",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "279",
    "submission": "480",
    "like": 122,
    "dislike": 50,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
    
    "no": 51,
    "name": "Subsets 2",
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",
    "difficulty": "Medium",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "824",
    "submission": "1500",
    "like": 122,
    "dislike": 50,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
    
    "no": 52,
    "name": "Decode Ways",
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",
    "difficulty": "Medium",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "1100",
    "submission": "3300",
    "like": 122,
    "dislike": 50,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
   
    "no": 53,
    "name": "Remove Linked List 2",
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",
    "difficulty": "Medium",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "786",
    "submission": "1700",
    "like": 122,
    "dislike": 50,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
    
    "no": 54,
    "name": "Restore IP Address",
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",
    "difficulty": "Easy",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "500",
    "submission": "700",
    "like": 122,
    "dislike": 50,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
   
  
    "no": 55,
    "name": "Binary Tree Inorder Traversal",
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",
    "difficulty": "Easy",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "2300",
    "submission": "3100",
    "like": 123,
    "dislike": 50,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
    
    "no": 56,
    "name": "Unique Binary Search Tre 2",
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",
    "difficulty": "Medium",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "429",
    "submission": "755",
    "like": 122,
    "dislike": 50,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
    
    "no": 57,
    "name": "Unique Binary Search Tree",
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",
    "difficulty": "Medium",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "625",
    "submission": "1000",
    "like": 122,
    "dislike": 50,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
   
    "no": 58,
    "name": "Interleaving String",
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",
    "difficulty": "Medium",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "480",
    "submission": "1200",
    "like": 122,
    "dislike": 50,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
    
    "no": 59,
    "name": "Validate Binary Search Tree",
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",
    "difficulty": "Medium",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "2200",
    "submission": "6600",
    "like": 122,
    "dislike": 50,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
    
    "no": 60,
    "name": "Remove Binary Search Tree",
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",
    "difficulty": "Medium",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "427",
    "submission": "815",
    "like": 122,
    "dislike": 50,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
   
    "no": 61,
    "name": "Same Tree",
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",
    "difficulty": "Easy",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "1800",
    "submission": "3000",
    "like": 122,
    "dislike": 50,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
   
    "no": 62,
    "name": "Next Permutation",
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",
    "difficulty": "Medium",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "1200",
    "submission": "3100",
    "like": 122,
    "dislike": 50,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
    
    "no": 63,
    "name": "Longest Valid Parantheses",
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",
    "difficulty": "Hard",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "679",
    "submission": "2000",
    "like": 122,
    "dislike": 50,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
    
    "no": 64,
    "name": "Search in Rotated Sorted Array 2",
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",
    "difficulty": "Medium",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "2500",
    "submission": "6100",
    "like": 122,
    "dislike": 50,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
   
    "no": 65,
    "name": "Find First and Last Portion of Element",
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",
    "difficulty": "Medium",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "1800",
    "submission": "4200",
    "like": 122,
    "dislike": 50,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
    
    "no": 66,
    "name": "Valid Sudoku",
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",
    "difficulty": "Medium",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "1300",
    "submission": "2300",
    "like": 122,
    "dislike": 50,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
   
    "no": 67,
    "name": "Sudoku Solver",
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",
    "difficulty": "Hard",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "529",
    "submission": "880",
    "like": 122,
    "dislike": 50,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
   
    "no": 68,
    "name": "Count and Say",
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",
    "difficulty": "Medium",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "857",
    "submission": "1600",
    "like": 122,
    "dislike": 50,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
    
    "no": 69,
    "name": "Combination Sum",
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",
    "difficulty": "Medium",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "1700",
    "submission": "2400",
    "like": 122,
    "dislike": 50,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  },
  {
   
    "no": 70,
    "name": "Combination Sum 2",
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",
    "difficulty": "Medium",
    "timeComplexity": "O(N)",
    "spaceComplexity": "O(N)",
    "companies": "Flipkart Adobe Directi",
    "testcase1": "geeksforgeeks forgeeksgeeks",
    "testcase2": "allergy allergic",
    "testcase3": "java maven",
    "outputOfTestcase1": "YES",
    "outputOfTestcase2": "NO",
    "outputOfTestcase3": "NO",
    "sampleInput1": "a = geeksforgeeks, b = forgeeksgeeks",
    "sampleInput2": "a = allergy, b = allergic",
    "sampleInput3": "a = java, b = maven",
    "sampleOutput1": "YES",
    "sampleOutput2": "NO",
    "sampleOutput3": "NO",
    "accepted": "868",
    "submission": "1600",
    "like": 122,
    "dislike": 50,
    "constraint1": "1 ≤ |m|,|n| ≤ 10⁵",
    "constraint2": "Note:- If the strings are anagrams you have to return True or else return False"
  }
]